"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[4732],{9047:(e,s,n)=>{n.d(s,{Z:()=>D});var t=n(7294),i=n(5893);function r(e){const{mdxAdmonitionTitle:s,rest:n}=function(e){const s=t.Children.toArray(e),n=s.find((e=>t.isValidElement(e)&&"mdxAdmonitionTitle"===e.type)),r=s.filter((e=>e!==n)),o=n?.props.children;return{mdxAdmonitionTitle:o,rest:r.length>0?(0,i.jsx)(i.Fragment,{children:r}):null}}(e.children),r=e.title??s;return{...e,...r&&{title:r},children:n}}var o=n(6905),a=n(5999),c=n(5281);const l={admonition:"admonition_xJq3",admonitionHeading:"admonitionHeading_Gvgb",admonitionIcon:"admonitionIcon_Rf37",admonitionContent:"admonitionContent_BuS1"};function d(e){let{type:s,className:n,children:t}=e;return(0,i.jsx)("div",{className:(0,o.Z)(c.k.common.admonition,c.k.common.admonitionType(s),l.admonition,n),children:t})}function h(e){let{icon:s,title:n}=e;return(0,i.jsxs)("div",{className:l.admonitionHeading,children:[(0,i.jsx)("span",{className:l.admonitionIcon,children:s}),n]})}function m(e){let{children:s}=e;return s?(0,i.jsx)("div",{className:l.admonitionContent,children:s}):null}function u(e){const{type:s,icon:n,title:t,children:r,className:o}=e;return(0,i.jsxs)(d,{type:s,className:o,children:[(0,i.jsx)(h,{title:t,icon:n}),(0,i.jsx)(m,{children:r})]})}function x(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const j={icon:(0,i.jsx)(x,{}),title:(0,i.jsx)(a.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function g(e){return(0,i.jsx)(u,{...j,...e,className:(0,o.Z)("alert alert--secondary",e.className),children:e.children})}function f(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const p={icon:(0,i.jsx)(f,{}),title:(0,i.jsx)(a.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function y(e){return(0,i.jsx)(u,{...p,...e,className:(0,o.Z)("alert alert--success",e.className),children:e.children})}function v(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const w={icon:(0,i.jsx)(v,{}),title:(0,i.jsx)(a.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function b(e){return(0,i.jsx)(u,{...w,...e,className:(0,o.Z)("alert alert--info",e.className),children:e.children})}function k(e){return(0,i.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const M={icon:(0,i.jsx)(k,{}),title:(0,i.jsx)(a.Z,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function _(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const C={icon:(0,i.jsx)(_,{}),title:(0,i.jsx)(a.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const T={icon:(0,i.jsx)(k,{}),title:(0,i.jsx)(a.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const S={...{note:g,tip:y,info:b,warning:function(e){return(0,i.jsx)(u,{...M,...e,className:(0,o.Z)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,i.jsx)(u,{...C,...e,className:(0,o.Z)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,i.jsx)(g,{title:"secondary",...e}),important:e=>(0,i.jsx)(b,{title:"important",...e}),success:e=>(0,i.jsx)(y,{title:"success",...e}),caution:function(e){return(0,i.jsx)(u,{...T,...e,className:(0,o.Z)("alert alert--warning",e.className),children:e.children})}}};var N=n(5108);function D(e){const s=r(e),n=(t=s.type,S[t]||(N.warn(`No admonition component found for admonition type "${t}". Using Info as fallback.`),S.info));var t;return(0,i.jsx)(n,{...s})}},363:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>d});n(7294);var t=n(5893),i=n(1151),r=n(9047);const o={},a="Memories",c={id:"components/memories",title:"Memories",description:"Thanks for your patience as we improve our documentation\u2014it might have some rough edges. Share your feedback or report issues to help us enhance it! \ud83d\udee0\ufe0f\ud83d\udcdd",source:"@site/docs/components/memories.mdx",sourceDirName:"components",slug:"/components/memories",permalink:"/components/memories",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{}},l={},d=[{value:"MessageHistory",id:"messagehistory",level:3},{value:"ConversationBufferMemory",id:"conversationbuffermemory",level:3},{value:"ConversationBufferWindowMemory",id:"conversationbufferwindowmemory",level:3},{value:"ConversationEntityMemory",id:"conversationentitymemory",level:3},{value:"ConversationKGMemory",id:"conversationkgmemory",level:3},{value:"ConversationSummaryMemory",id:"conversationsummarymemory",level:3},{value:"PostgresChatMessageHistory",id:"postgreschatmessagehistory",level:3},{value:"VectorRetrieverMemory",id:"vectorretrievermemory",level:3}];function h(e){const s=Object.assign({h1:"h1",p:"p",hr:"hr",h3:"h3",strong:"strong",ul:"ul",li:"li",code:"code"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"memories",children:"Memories"}),"\n",(0,t.jsx)(r.Z,{type:"caution",icon:"\ud83d\udea7",title:"ZONE UNDER CONSTRUCTION",children:(0,t.jsx)("p",{children:(0,t.jsx)(s.p,{children:"Thanks for your patience as we improve our documentation\u2014it might have some rough edges. Share your feedback or report issues to help us enhance it! \ud83d\udee0\ufe0f\ud83d\udcdd"})})}),"\n",(0,t.jsx)(s.p,{children:"Memory is a concept in chat-based applications that allows the system to remember previous interactions. This capability helps maintain the context of the conversation and enables the system to understand new messages in light of past messages."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"messagehistory",children:"MessageHistory"}),"\n",(0,t.jsx)(s.p,{children:"This component retrieves stored messages using various filters such as sender type, sender name, session ID, and the specific file path where messages are stored. It offers flexible retrieval of chat history, providing insights into past interactions."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"sender_type"})," (optional): Specifies the sender's type. Options include ",(0,t.jsx)(s.code,{children:'"Machine"'}),", ",(0,t.jsx)(s.code,{children:'"User"'}),", or ",(0,t.jsx)(s.code,{children:'"Machine and User"'}),". Filters messages by the sender type."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"sender_name"})," (optional): Specifies the sender's name. Filters messages by the sender's name."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"session_id"})," (optional): Specifies the session ID of the chat history. Filters messages by session."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"number_of_messages"}),": Specifies the number of messages to retrieve. Defaults to ",(0,t.jsx)(s.code,{children:"5"}),". Determines the number of recent messages from the chat history to fetch."]}),"\n"]}),"\n",(0,t.jsx)(r.Z,{type:"note",title:"Note",children:(0,t.jsx)("p",{children:(0,t.jsx)(s.p,{children:"The component retrieves messages based on the provided criteria, including the specific file path for stored messages. If no specific criteria are provided, it returns the most recent messages up to the specified limit. This component can be used to review past interactions and analyze conversation flows."})})}),"\n",(0,t.jsx)(s.h3,{id:"conversationbuffermemory",children:"ConversationBufferMemory"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ConversationBufferMemory"})," component stores the last few inputs and outputs of a conversation."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"input_key"}),": Specifies the key under which the user input will be stored in the conversation memory."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"memory_key"}),": Specifies the prompt variable name where the memory will store and retrieve chat messages. Defaults to ",(0,t.jsx)(s.code,{children:"chat_history"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"output_key"}),": Specifies the key under which the generated response will be stored."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"return_messages"}),": Determines whether the history should be returned as a string or as a list of messages. The default is ",(0,t.jsx)(s.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"conversationbufferwindowmemory",children:"ConversationBufferWindowMemory"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"ConversationBufferWindowMemory"})," is a variant of the ",(0,t.jsx)(s.code,{children:"ConversationBufferMemory"})," that keeps only the last K interactions in memory. It's useful for maintaining a sliding window of recent interactions without letting the buffer get too large."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"input_key"}),": Specifies the keys in the memory object where input messages are stored."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"memory_key"}),": Specifies the prompt variable name for storing and retrieving chat messages. Defaults to ",(0,t.jsx)(s.code,{children:"chat_history"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"k"}),": Specifies the number of interactions or messages to be stored in the conversation buffer."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"output_key"}),": Specifies the key under which the generated response will be stored."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"return_messages"}),": Determines whether the history should be returned as a string or as a list of messages. The default is ",(0,t.jsx)(s.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"conversationentitymemory",children:"ConversationEntityMemory"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ConversationEntityMemory"})," component uses a key-value store to manage entities mentioned in conversations. This structure enhances the storage and retrieval of information about specific entities."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"entity_store"}),": A structure that stores information about entities mentioned in a conversation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"LLM"}),": Specifies the language model used in the ",(0,t.jsx)(s.code,{children:"ConversationEntityMemory"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"chat_history_key"}),": A unique identifier for the chat history data associated with a particular entity. This key helps organize and access chat history data for each entity within the memory. Defaults to ",(0,t.jsx)(s.code,{children:"history"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"input_key"}),": Identifies where input messages are stored in the memory object, allowing for their retrieval and manipulation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"k"}),": Specifies the maximum number of entities that can be stored and retrieved from the memory. Defaults to ",(0,t.jsx)(s.code,{children:"10"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"output_key"}),": Identifies the key under which the generated response is stored, enabling retrieval using this key."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"return_messages"}),": Controls whether the history is returned as a string or as a list of messages. Defaults to ",(0,t.jsx)(s.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"conversationkgmemory",children:"ConversationKGMemory"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ConversationKGMemory"})," utilizes a knowledge graph to enhance memory capabilities. It extracts entities and knowledge triplets from new messages, using previous messages as context."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"LLM"}),": Specifies the language model used in the ",(0,t.jsx)(s.code,{children:"ConversationKGMemory"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"input_key"}),": Identifies where input messages are stored in the memory object, facilitating their retrieval and manipulation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"k"}),": Indicates the number of previous conversation turns stored in memory, allowing the model to utilize information from these turns. Defaults to ",(0,t.jsx)(s.code,{children:"10"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"memory_key"}),": Specifies the prompt variable name where the memory stores and retrieves chat messages. Defaults to ",(0,t.jsx)(s.code,{children:"chat_history"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"output_key"}),": Identifies the key under which the generated response"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"is stored, enabling retrieval using this key."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"return_messages"}),": Controls whether the history is returned as a string or as a list of messages. Defaults to ",(0,t.jsx)(s.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"conversationsummarymemory",children:"ConversationSummaryMemory"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ConversationSummaryMemory"})," summarizes conversations over time, condensing information and storing it efficiently. It's particularly useful for long conversations."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"LLM"}),": Specifies the language model used in the ",(0,t.jsx)(s.code,{children:"ConversationSummaryMemory"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"input_key"}),": Identifies where input messages are stored in the memory object, facilitating their retrieval and manipulation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"memory_key"}),": Specifies the prompt variable name where the memory stores and retrieves chat messages. Defaults to ",(0,t.jsx)(s.code,{children:"chat_history"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"output_key"}),": Identifies the key under which the generated response is stored, enabling retrieval using this key."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"return_messages"}),": Controls whether the history is returned as a string or as a list of messages. Defaults to ",(0,t.jsx)(s.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"postgreschatmessagehistory",children:"PostgresChatMessageHistory"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"PostgresChatMessageHistory"})," component uses a PostgreSQL database to store and retrieve chat message history."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"connection_string"}),": Specifies the details needed to connect to the PostgreSQL database, including username, password, host, port, and database name. Defaults to ",(0,t.jsx)(s.code,{children:"postgresql://postgres:mypassword@localhost/chat_history"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"session_id"}),": A unique identifier used to link chat message history with a specific session or conversation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"table_name"}),": The name of the PostgreSQL database table where chat message history is stored. Defaults to ",(0,t.jsx)(s.code,{children:"message_store"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"vectorretrievermemory",children:"VectorRetrieverMemory"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"VectorRetrieverMemory"})," retrieves vectors based on queries, facilitating vector-based searches and retrievals."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Retriever"}),": The tool used to fetch documents."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"input_key"}),": Identifies where input messages are stored in the memory object, facilitating their retrieval and manipulation."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"memory_key"}),": Specifies the prompt variable name where the memory stores and retrieves chat messages. Defaults to ",(0,t.jsx)(s.code,{children:"chat_history"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"return_messages"}),": Controls whether the history is returned as a string or as a list of messages. Defaults to ",(0,t.jsx)(s.code,{children:"False"}),"."]}),"\n"]})]})}const m=function(e={}){const{wrapper:s}=Object.assign({},(0,i.ah)(),e.components);return s?(0,t.jsx)(s,Object.assign({},e,{children:(0,t.jsx)(h,e)})):h(e)}},1151:(e,s,n)=>{n.d(s,{Zo:()=>a,ah:()=>r});var t=n(7294);const i=t.createContext({});function r(e){const s=t.useContext(i);return t.useMemo((()=>"function"==typeof e?e(s):{...s,...e}),[s,e])}const o={};function a({components:e,children:s,disableParentContext:n}){let a;return a=n?"function"==typeof e?e({}):e||o:r(e),t.createElement(i.Provider,{value:a},s)}}}]);