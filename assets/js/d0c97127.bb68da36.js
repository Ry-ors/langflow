"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[1055],{3414:(e,t,n)=>{n.d(t,{Z:()=>a});var s=n(7294),i=n(9965),o=n(4996),r=n(5893);const a=e=>{let{alt:t,sources:n,style:a}=e;const[c,l]=(0,s.useState)(!1),m=e=>{"Escape"===e.key&&l(!1)};(0,s.useEffect)((()=>(c?document.addEventListener("keydown",m):document.removeEventListener("keydown",m),()=>{document.removeEventListener("keydown",m)})),[c]);return(0,r.jsx)("div",{className:"zoomable-image "+(c?"fullscreen":""),onClick:()=>{l(!c)},style:{width:"50%",margin:"0 auto",display:"flex",justifyContent:"center",...a},children:(0,r.jsx)(i.Z,{className:"zoomable-image-inner",alt:t,sources:{light:(0,o.Z)(n.light),dark:(0,o.Z)(n.dark)}})})}},784:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>x,frontMatter:()=>a,metadata:()=>l,toc:()=>d});n(7294);var s=n(5893),i=n(1151),o=(n(9965),n(4996),n(3414),n(2004)),r=n.n(o);n(9047);const a={},c="Combine Text",l={id:"examples/combine-text",title:"Combine Text",description:"With LLM pipelines, combining text from different sources may be as important as splitting text.",source:"@site/docs/examples/combine-text.mdx",sourceDirName:"examples",slug:"/examples/combine-text",permalink:"/examples/combine-text",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Chat Memory",permalink:"/examples/chat-memory"},next:{title:"Create Record",permalink:"/examples/create-record"}},m={},d=[];function p(e){const t=Object.assign({h1:"h1",p:"p",strong:"strong"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"combine-text",children:"Combine Text"}),"\n",(0,s.jsx)(t.p,{children:"With LLM pipelines, combining text from different sources may be as important as splitting text."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"Combine Text"})," component concatenates two text inputs into a single chunk using a specified delimiter, such as whitespace or a newline."]}),"\n",(0,s.jsxs)(t.p,{children:["Also, check out ",(0,s.jsx)(t.strong,{children:"Combine Texts (Unsorted)"})," as a similar alternative."]}),"\n",(0,s.jsxs)(t.p,{children:["This component is available under the ",(0,s.jsx)(t.strong,{children:"Helpers"})," tab of the Langflow preview."]}),"\n",(0,s.jsx)("div",{style:{marginBottom:"20px",display:"flex",justifyContent:"center"},children:(0,s.jsx)(r(),{playing:!0,controls:!0,url:"/videos/combine_text.mp4"})})]})}const x=function(e={}){const{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(p,e)})):p(e)}},1151:(e,t,n)=>{n.d(t,{Zo:()=>a,ah:()=>o});var s=n(7294);const i=s.createContext({});function o(e){const t=s.useContext(i);return s.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const r={};function a({components:e,children:t,disableParentContext:n}){let a;return a=n?"function"==typeof e?e({}):e||r:o(e),s.createElement(i.Provider,{value:a},t)}}}]);